Java SE API
------------
java.util
|__Scanner.java - It allows to get runtime input from user.

java.io
|__InputStream.java [it is an abstract class]

java.lang
|__System.java

class System {
  static InputStream in;	
  static PrintStream out;
}

System.in
System.out.println()

class ClassName {
  variables;
  methods;
}

abstract class ClassName {
  variables;
  methods;	    //it is a method definition section	
  abstract methods; //it is a method declaration section
}

abstract class LivingThing {
  int id;
  String name;
  void display() {
    System.out.println("ID: "+id+" Name: "+name);
  }
  abstract void walk();
}
class Human extends LivingThing {

}

LivingThing obj = new LivingThing();

1. abstract class cannot instantiate directly
2. abstract class is act as a parent/base/super class
3. which class is followed by abstract class it's automatically override the abstract method

Java Inheritance
-----------------
class Standard{
 void add(){}
 void subtract(){}
 void multiply(){}
 void division(){}
}
class Scientific extends Standard {
  void sinValue(){}
  void cosValue(){}
  void tanValue(){}  
}

1. Single 2. Multi-level 3. Hierarchical 4. Multiple 5. Hybrid

class A{}
class B extends A{}

B obj = new B();

class A {}
class B extends A {}
class C extends B {}

C obj = new C();

class A {}
class B extends A {}
class C extends A {}
class D extends A {}

B b = new B();
C c = new C();
D d = new D();

class A {}
class B {}
class C extends A, B {}		// compilation error
				// extends keyword extend only one base class

this	- it allows to represent the current instance member
this()	- call the constractor method within a class 

super	- refer to immediate super class member
super()	- call the immediate super class constructor method

class A {
 A() {}		// default constructor
}
class B extends A {
 B() {} 	// default constructor
}
class Main {
 main() {
  B obj = new B();
 }
}
   
Scanner scan = new Scanner(System.in);
|__boolean nextBoolean()
|__String nextLine()
|__String next()

Java Wrapper classes - java.lang
--------------------   |__
boolean			Boolean.java	static boolean parseBoolean(String data)
byte			Byte.java	static byte parseByte(String data)
short			Short.java	static short parseShort(String data)
int			Integer.java	static int parseInt(String data)
long			Long.java	static long parseLong(String data)
float			Float.java	static float parseFloat(String data)
double			Double.java	static double parseDouble(String data)
char			Character.java

class A{
 static int a;
 Integer a1;
 static int display() {}

}
class B {
 void m1() {
   //A obj = new A();
   A.display();


public static void main(String[] args) {}

Interface
---------
class A{}
abstract class Abs{}

class -> interface -> implements <-- class

<modifier> interface <InterfaceName> {
  variables;	// By default, public static final - variable
  methods;	// By default, it is an abstract method
  //Java 8 onwards
  default method definition;
  static method definition;
}

interface IA{}
class A implements IA {}

Abstract 		vs 			Interface

public interface Shape {
  double PI;		//compilation error because it is a final variable it should be initialized the value
  public double calculateArea();	//
  public double calculateVolume();

}























